/*
 * Copyright 2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
	id 'idea'
	id 'maven'
	id 'groovy'
	id 'codenarc'
	id 'maven-publish'
	id 'com.jfrog.bintray' version '0.5'
}
apply from: 'gradle/idea.gradle'

group = 'org.golo-lang'
version = '0.6-SNAPSHOT'

ext {
	localRepoDir = new File(buildDir, 'localRepo')
	generatedTestResourcesDir = new File(buildDir, 'testResources')

	goloVersion = "1.0.0"
}

repositories {
	mavenCentral()
}

configurations {
	integrationTestCompile.extendsFrom testCompile
	integrationTestRuntime.extendsFrom testRuntime
	golo
}

sourceSets {
	main.compileClasspath += configurations.golo
	integrationTest {
		compileClasspath += main.output
		runtimeClasspath += main.output
	}
}

dependencies {
	golo 'org.golo-lang:golo:1.0.0'

	compile localGroovy()
	compile gradleApi(), 'commons-io:commons-io:1.4'
	testCompile 'org.spockframework:spock-core:0.7-groovy-2.0', {
		exclude module: 'groovy-all'
	}

	codenarc 'org.codenarc:CodeNarc:0.21'
}

codenarc.configFile = file('gradle/config/codenarc/rulesets.groovy')

task archiveReports(type: Zip) {
	from reporting.baseDir
	archiveName 'reports.zip'
}

class WriteTestConfig extends DefaultTask {

	@OutputFile
	File getTestConfigPropertiesFile() {
		new File(project.generatedTestResourcesDir, 'test-config.properties')
	}

	@Input
	Properties getTestConfig() {
		def testConfigProperties = new Properties()
		testConfigProperties["localRepo.uri"] = project.localRepoDir.toURI().toString()
		testConfigProperties["golo.version"] = project.goloVersion

		testConfigProperties
	}

	@TaskAction
	def generate() {
		testConfigPropertiesFile.withOutputStream { testConfig.store(it, null) }
	}
}

task writeTestConfig(type: WriteTestConfig)


sourceSets.integrationTest.resources.srcDir generatedTestResourcesDir

processIntegrationTestResources.dependsOn writeTestConfig
ideaModule.dependsOn writeTestConfig

task integrationTest(type: Test) {
	dependsOn install

	testClassesDir = sourceSets.integrationTest.output.classesDir
	classpath = sourceSets.integrationTest.runtimeClasspath
	testSrcDirs = sourceSets.integrationTest.allJava.srcDirs as List

	mustRunAfter test
}

check.dependsOn integrationTest

tasks.withType(CodeNarc) {
	onlyIf { !project.hasProperty('ciBuild') }
}

install {
	repositories {
		mavenDeployer {
			repository(url: localRepoDir.toURI())
		}
	}
}

task javadocJar(type: Jar) {
	from javadoc
	classifier = 'javadoc'
}

task sourcesJar(type: Jar) {
	from sourceSets.main.allSource
	classifier = 'sources'
}

def pomConfig = {
	scm {
		url 'https://github.com/golo-lang/gradle-golo-plugin'
		connection 'scm:git://github.com/golo-lang/gradle-golo-plugin.git'
		developerConnection 'scm:git@github.com:golo-lang/gradle-golo-plugin.git'
	}

	licenses {
		license {
			name 'The Apache Software License, Version 2.0'
			url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
			distribution 'repo'
		}
	}

	developers {
		developer {
			id 'erdi'
			name 'Marcin Erdmann'
			email 'marcin.erdmann@proxerd.pl'
		}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java

			artifact sourcesJar
			artifact javadocJar

			pom.withXml {
				def root = asNode()
				root.appendNode('description', 'Gradle Golo plugin')
				root.appendNode('url', 'https://github.com/golo-lang/gradle-golo-plugin')
				root.appendNode('inceptionYear', '2013')
				root.children().last() + pomConfig
			}
		}
	}
}

bintray {
	if (project.hasProperty('bintrayUser') && project.hasProperty('bintrayKey')) {
		user = bintrayUser
		key = bintrayKey
	}

	publications = ['mavenJava']

	pkg {
		userOrg = 'golo-lang'
		repo = 'gradle-golo-plugin'
		name = 'org.golo-lang:gradle-golo-plugin'
		desc = 'This plugin provides a task type for compiling Golo code.'
		licenses = ['Apache-2.0']
		labels = ['golo-lang']
		version {
			name = "${project.version}"
			vcsTag = "v${project.version}"
			attributes = ['gradle-plugin': 'org.golo-lang.golo:org.golo-lang:gradle-golo-plugin']
		}
	}
}