/*
 * Copyright 2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
apply plugin: 'idea'
apply plugin: 'groovy'
apply plugin: 'codenarc'
apply plugin: 'nexus'
apply plugin: 'bintray'
apply plugin: 'maven-publish'
apply from: 'gradle/idea.gradle'
apply from: 'gradle/pom.gradle'

group = 'org.golo-lang'
version = '0.4-SNAPSHOT'

buildscript {
	repositories {
		mavenCentral()
		jcenter()
	}

	dependencies {
		classpath 'org.gradle.api.plugins:gradle-nexus-plugin:0.7.1'
		classpath 'org.gradle.api.plugins:gradle-clover-plugin:0.6.1'
		classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:0.3'
	}
}

/*publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java

			artifact sourcesJar {
				classifier 'sources'
			}

			artifact javadocJar {
				classifier 'javadoc'
			}
		}
	}
}

bintray {
	if (project.hasProperty('bintrayUser') && project.hasProperty('bintrayKey')) {
		user = bintrayUser
		key = bintrayKey
	}

	publications = ['mavenJava'] // When uploading Maven-based publication files

	pkg {
		repo = 'gradle-plugins'
		name = 'gradle-golo-plugin'
		desc = 'This plugin provides a task type for compiling Golo code.'
		licenses = ['Apache-2.0']
		labels = ['gradle', 'golo-lang']
	}
}*/

nexus {
	sign = !version.endsWith("SNAPSHOT")
}

repositories {
    mavenCentral()
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
    golo
}

sourceSets {
    main.compileClasspath += configurations.golo
    integrationTest {
        compileClasspath += main.output
        runtimeClasspath += main.output
    }
}

dependencies {
	golo 'org.golo-lang:golo:1.0.0'

	compile localGroovy()
    compile gradleApi(), 'commons-io:commons-io:1.4'
    testCompile 'org.spockframework:spock-core:0.7-groovy-1.8'

	codenarc 'org.codenarc:CodeNarc:0.18.1'
}

codenarc.configFile = file('gradle/config/codenarc/rulesets.groovy')

task archiveReports(type: Zip) {
    from reporting.baseDir
    archiveName 'reports.zip'
}

task integrationTest(type: Test) {
	dependsOn install

    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
	testSrcDirs = sourceSets.integrationTest.allJava.srcDirs as List

	mustRunAfter test

	systemProperty 'localRepo.location', "${buildDir.absolutePath}/localRepo"
}

check.dependsOn integrationTest

tasks.withType(CodeNarc) {
	onlyIf { !project.hasProperty('ciBuild') }
}

install {
	repositories {
		mavenDeployer {
			repository(url: "file://${buildDir.absolutePath}/localRepo")
		}
	}
}